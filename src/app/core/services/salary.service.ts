import { Injectable, inject } from '@angular/core';
import { StorageService } from './storage.service';
import { UtilsService } from './utils.service';
import { Transaction } from '../models/transaction.model';

@Injectable({
  providedIn: 'root'
})
export class SalaryService {
  private storageService = inject(StorageService);
  private utilsService = inject(UtilsService);

  /**
   * Verifica se o sal√°rio do m√™s atual j√° foi adicionado
   * Consulta DIRETAMENTE o localStorage
   */
  isSalaryAddedForCurrentMonth(): boolean {
    const today = new Date();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();
    
    // Consulta DIRETA do localStorage
    const transactions = this.storageService.getTransactions();
    
    // Mostra TODOS os sal√°rios no localStorage
    const allSalaries = transactions.filter(transaction => 
      (transaction.description.toLowerCase() === 'sal√°rio' || 
       transaction.category === 'Sal√°rio') && transaction.amount > 0
    );
    
    console.log(`üìä TOTAL DE SAL√ÅRIOS NO LOCALSTORAGE: ${allSalaries.length}`);
    allSalaries.forEach((salary, index) => {
      const transactionDate = new Date(salary.date);
      console.log(`üí∞ Sal√°rio ${index + 1}: ${salary.date} - R$ ${salary.amount} (m√™s ${transactionDate.getMonth() + 1}/${transactionDate.getFullYear()})`);
    });
    
    // Busca SIMPLES: sal√°rio no m√™s atual
    for (const transaction of transactions) {
      const transactionDate = new Date(transaction.date);
      const isSalary = (transaction.description.toLowerCase() === 'sal√°rio' || 
                       transaction.category === 'Sal√°rio') &&
                      transaction.amount > 0;
      const isCurrentMonth = transactionDate.getMonth() === currentMonth &&
                            transactionDate.getFullYear() === currentYear;
      
      if (isSalary && isCurrentMonth) {
        console.log(`‚úÖ SAL√ÅRIO J√Å EXISTE NO M√äS ATUAL: ${transaction.date} - R$ ${transaction.amount}`);
        return true;
      }
    }
    
    console.log(`‚ùå NENHUM SAL√ÅRIO encontrado no m√™s ${currentMonth + 1}/${currentYear}`);
    return false;
  }

  /**
   * Verifica se deve adicionar o sal√°rio (sempre verdadeiro se configurado e n√£o adicionado ainda)
   * A data ser√° sempre a data atual de quando o usu√°rio configurou
   */
  isSalaryDayReached(): boolean {
    const settings = this.storageService.getSettings();
    return !!(settings.salary && settings.salary > 0);
  }

  /**
   * Verifica se deve adicionar o sal√°rio automaticamente
   */
  shouldAddSalary(): boolean {
    const settings = this.storageService.getSettings();
    const hasSalary = this.isSalaryAddedForCurrentMonth();
    
    // SIMPLES: tem sal√°rio configurado E n√£o tem sal√°rio no m√™s atual
    const shouldAdd = settings.salary > 0 && !hasSalary;
    
    console.log(`ü§î Deve adicionar sal√°rio?`, {
      salarioConfigurado: settings.salary,
      jaTemSalario: hasSalary,
      deveAdicionar: shouldAdd
    });
    
    return shouldAdd;
  }

  /**
   * Adiciona o sal√°rio do m√™s atual automaticamente
   * Usa a data baseada nas configura√ß√µes (dia do sal√°rio)
   */
  addMonthlySalary(): Transaction | null {
    const settings = this.storageService.getSettings();
    
    console.log('üí∞ addMonthlySalary - CONFIGURA√á√ïES:', {
      salary: settings.salary,
      salaryDay: settings.salaryDay,
      creditCardDueDay: settings.creditCardDueDay
    });
    
    if (!settings.salary || settings.salary <= 0) {
      console.log('‚ùå SAL√ÅRIO N√ÉO CONFIGURADO');
      return null;
    }

    console.log('üîç addMonthlySalary - ANTES DE CRIAR DATA:', {
      salaryDay: settings.salaryDay,
      currentDate: new Date().toString()
    });

    // Usa o m√©todo padronizado para criar a data do sal√°rio
    const salaryDate = this.utilsService.createSalaryDate(settings.salaryDay);
    
    console.log('üîç addMonthlySalary - AP√ìS CRIAR DATA:', {
      salaryDay: settings.salaryDay,
      salaryDate,
      CORRETO: salaryDate.includes(`-${String(settings.salaryDay).padStart(2, '0')}`)
    });
    
    const salaryTransaction: Transaction = {
      id: this.utilsService.generateId(),
      description: 'Sal√°rio',
      amount: settings.salary,
      category: 'Sal√°rio',
      date: salaryDate,
      isCreditCard: false,
      createdAt: new Date()
    };

    console.log('üí∞ CRIANDO SAL√ÅRIO:', {
      data: salaryDate,
      valor: settings.salary,
      dia: settings.salaryDay,
      transaction: salaryTransaction
    });

    // Adiciona a categoria de sal√°rio se n√£o existir
    this.ensureSalaryCategoryExists();
    
    // Adiciona a transa√ß√£o
    this.storageService.addTransaction(salaryTransaction);
    
    console.log('‚úÖ SAL√ÅRIO ADICIONADO AO LOCALSTORAGE');
    return salaryTransaction;
  }

  /**
   * Garante que a categoria "Sal√°rio" existe
   */
  private ensureSalaryCategoryExists(): void {
    const categories = this.storageService.getCategories();
    const salaryCategory = categories.find(cat => cat.name === 'Sal√°rio');
    
    if (!salaryCategory) {
      const newCategory = {
        id: this.utilsService.generateId(),
        name: 'Sal√°rio',
        color: '#4ade80' // Verde para receita
      };
      
      this.storageService.addCategory(newCategory);
    }
  }

  /**
   * Obt√©m informa√ß√µes sobre o pr√≥ximo sal√°rio
   */
  getNextSalaryInfo(): { date: Date; daysUntil: number } | null {
    const settings = this.storageService.getSettings();
    
    if (!settings.salaryDay || !settings.salary || settings.salary <= 0) {
      return null;
    }

    const today = new Date();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();
    
    let nextSalaryDate = new Date(currentYear, currentMonth, settings.salaryDay);
    
    // Se o dia do sal√°rio j√° passou neste m√™s, calcula para o pr√≥ximo m√™s
    if (nextSalaryDate <= today) {
      nextSalaryDate = new Date(currentYear, currentMonth + 1, settings.salaryDay);
    }
    
    const daysUntil = Math.ceil((nextSalaryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    
    return {
      date: nextSalaryDate,
      daysUntil: daysUntil
    };
  }

  /**
   * Remove sal√°rios duplicados do m√™s atual (mant√©m apenas o mais recente)
   */
  removeDuplicateSalaries(): void {
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    
    const transactions = this.storageService.getTransactions();
    const salaryTransactions = transactions.filter(transaction => {
      const transactionDate = new Date(transaction.date);
      return (
        (transaction.description.toLowerCase() === 'sal√°rio' || 
         transaction.category === 'Sal√°rio') &&
        transaction.amount > 0 &&
        transactionDate.getMonth() === currentMonth &&
        transactionDate.getFullYear() === currentYear
      );
    });

    if (salaryTransactions.length > 1) {
      // Ordena por data de cria√ß√£o (mais recente primeiro)
      salaryTransactions.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
      
      // Remove todos exceto o primeiro (mais recente)
      for (let i = 1; i < salaryTransactions.length; i++) {
        this.storageService.deleteTransaction(salaryTransactions[i].id);
      }
      
      console.log(`‚úÖ Removidos ${salaryTransactions.length - 1} sal√°rios duplicados`);
    }
  }

  /**
   * Verifica e adiciona sal√°rio automaticamente se necess√°rio
   * Retorna true se o sal√°rio foi adicionado
   */
  checkAndAddSalaryIfNeeded(): boolean {
    console.log('üîç VERIFICANDO SAL√ÅRIO...');
    
    // PRIMEIRO: limpa duplicatas
    this.cleanAllDuplicateSalaries();
    
    // SEGUNDO: verifica se j√° tem sal√°rio
    if (this.isSalaryAddedForCurrentMonth()) {
      console.log('‚úÖ SAL√ÅRIO J√Å EXISTE - N√ÉO ADICIONA');
      return false;
    }
    
    // TERCEIRO: se n√£o tem sal√°rio, adiciona
    console.log('‚ûï ADICIONANDO NOVO SAL√ÅRIO...');
    const transaction = this.addMonthlySalary();
    return transaction !== null;
  }

  /**
   * Encontra o sal√°rio existente do m√™s atual
   */
  findCurrentMonthSalary(): Transaction | null {
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    
    const transactions = this.storageService.getTransactions();
    
    console.log(`üîç Procurando sal√°rio do m√™s atual:`, {
      mesAtual: currentMonth + 1,
      anoAtual: currentYear,
      totalTransacoes: transactions.length
    });
    
    const salaryTransactions = transactions.filter(transaction => {
      const transactionDate = new Date(transaction.date);
      const isSalary = (transaction.description.toLowerCase() === 'sal√°rio' || 
                       transaction.category === 'Sal√°rio') &&
                      transaction.amount > 0;
      const isCurrentMonth = transactionDate.getMonth() === currentMonth &&
                            transactionDate.getFullYear() === currentYear;
      
      if (isSalary) {
        console.log(`üí∞ Sal√°rio encontrado:`, {
          id: transaction.id,
          data: transaction.date,
          mes: transactionDate.getMonth() + 1,
          ano: transactionDate.getFullYear(),
          valor: transaction.amount,
          isCurrentMonth: isCurrentMonth
        });
      }
      
      return isSalary && isCurrentMonth;
    });
    
    const result = salaryTransactions.length > 0 ? salaryTransactions[0] : null;
    console.log(`‚úÖ Sal√°rio do m√™s atual:`, result ? 'Encontrado' : 'N√£o encontrado');
    
    return result;
  }

  /**
   * Atualiza o sal√°rio existente com novas configura√ß√µes
   * Retorna true se o sal√°rio foi atualizado
   */
  updateExistingSalary(): boolean {
    const settings = this.storageService.getSettings();
    const existingSalary = this.findCurrentMonthSalary();
    
    if (!existingSalary) {
      console.log('‚ùå Nenhum sal√°rio existente encontrado para atualizar');
      return false;
    }
    
    if (!settings.salary || settings.salary <= 0) {
      console.log('‚ùå Sal√°rio n√£o configurado ou inv√°lido');
      return false;
    }

    // Usa o m√©todo padronizado para criar a nova data
    const newSalaryDate = this.utilsService.createSalaryDate(settings.salaryDay);

    // Verifica se precisa atualizar
    const needsUpdate = 
      existingSalary.amount !== settings.salary ||
      newSalaryDate !== existingSalary.date;

    console.log(`üîç Verificando atualiza√ß√£o:`, {
      valorAtual: existingSalary.amount,
      valorNovo: settings.salary,
      dataAtual: existingSalary.date,
      dataNova: newSalaryDate,
      precisaAtualizar: needsUpdate
    });

    if (!needsUpdate) {
      console.log('‚úÖ Sal√°rio j√° est√° atualizado');
      return false;
    }

    // Atualiza o sal√°rio existente
    const updatedTransaction: Partial<Transaction> = {
      amount: settings.salary,
      date: newSalaryDate
    };

    this.storageService.updateTransaction(existingSalary.id, updatedTransaction);
    
    console.log('‚úÖ SAL√ÅRIO ATUALIZADO:', {
      valor: settings.salary,
      data: newSalaryDate,
      dia: settings.salaryDay
    });

    return true;
  }

  /**
   * Calcula a data do sal√°rio baseada nas configura√ß√µes
   * Usa exatamente o dia configurado, mesmo em feriados
   */
  private getSalaryDateFromSettings(): string {
    const settings = this.storageService.getSettings();
    
    // Usa o m√©todo padronizado para criar a data
    const result = this.utilsService.createSalaryDate(settings.salaryDay);
    
    console.log(`üìÖ Data do sal√°rio calculada:`, {
      diaConfigurado: settings.salaryDay,
      dataFinal: result
    });
    
    return result;
  }

  /**
   * Sincroniza o sal√°rio com as configura√ß√µes atuais
   * Atualiza sal√°rio existente ou cria novo se necess√°rio
   */
  syncSalaryWithSettings(): boolean {
    console.log('üîÑ SINCRONIZANDO SAL√ÅRIO COM CONFIGURA√á√ïES...');
    
    const settings = this.storageService.getSettings();
    
    // Se n√£o h√° sal√°rio configurado, remove sal√°rios existentes
    if (!settings.salary || settings.salary <= 0) {
      console.log('‚ùå Sal√°rio n√£o configurado - removendo sal√°rios existentes');
      this.removeCurrentMonthSalaries();
      return false;
    }

    // PRIMEIRO: limpa duplicatas
    this.cleanAllDuplicateSalaries();
    
    // SEGUNDO: verifica se existe sal√°rio no m√™s atual
    const existingSalary = this.findCurrentMonthSalary();
    
    if (existingSalary) {
      console.log('‚úÖ Sal√°rio existente encontrado - atualizando...');
      return this.updateExistingSalary();
    } else {
      console.log('‚ûï Nenhum sal√°rio encontrado - criando novo...');
      const transaction = this.addMonthlySalary();
      return transaction !== null;
    }
  }

  /**
   * Sincroniza o salaryDay com base nas transa√ß√µes de sal√°rio existentes
   * √ötil para corrigir inconsist√™ncias ap√≥s refresh
   */
  syncSalaryDayFromExistingTransactions(): boolean {
    console.log('üîÑ SINCRONIZANDO SALARY DAY COM TRANSA√á√ïES EXISTENTES...');
    
    const settings = this.storageService.getSettings();
    const transactions = this.storageService.getTransactions();
    
    // Busca transa√ß√µes de sal√°rio
    const salaryTransactions = transactions.filter(transaction => 
      (transaction.description.toLowerCase() === 'sal√°rio' || 
       transaction.category === 'Sal√°rio') && 
      transaction.amount > 0
    );
    
    if (salaryTransactions.length === 0) {
      console.log('‚ùå Nenhuma transa√ß√£o de sal√°rio encontrada');
      return false;
    }
    
    // Pega a transa√ß√£o mais recente
    const latestSalary = salaryTransactions.sort((a, b) => 
      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    )[0];
    
    // Extrai o dia da transa√ß√£o
    const extractedDay = this.utilsService.syncSalaryDayFromTransaction(latestSalary);
    
    console.log(`üìÖ Dia extra√≠do da transa√ß√£o: ${extractedDay} (data: ${latestSalary.date})`);
    
    // Se o dia extra√≠do √© diferente do configurado, atualiza
    if (extractedDay !== settings.salaryDay) {
      console.log(`üîÑ Atualizando salaryDay de ${settings.salaryDay} para ${extractedDay}`);
      
      const updatedSettings = {
        ...settings,
        salaryDay: extractedDay
      };
      
      this.storageService.saveSettings(updatedSettings);
      
      console.log('‚úÖ SalaryDay sincronizado com transa√ß√µes existentes');
      return true;
    }
    
    console.log('‚úÖ SalaryDay j√° est√° sincronizado');
    return false;
  }

  /**
   * Corrige a data da transa√ß√£o de sal√°rio existente para o dia correto
   */
  fixExistingSalaryDate(): boolean {
    console.log('üîß CORRIGINDO DATA DA TRANSA√á√ÉO DE SAL√ÅRIO EXISTENTE...');
    
    const settings = this.storageService.getSettings();
    const transactions = this.storageService.getTransactions();
    
    // Busca transa√ß√µes de sal√°rio
    const salaryTransactions = transactions.filter(transaction => 
      (transaction.description.toLowerCase() === 'sal√°rio' || 
       transaction.category === 'Sal√°rio') && 
      transaction.amount > 0
    );
    
    if (salaryTransactions.length === 0) {
      console.log('‚ùå Nenhuma transa√ß√£o de sal√°rio encontrada');
      return false;
    }
    
    let hasChanges = false;
    
    // Corrige cada transa√ß√£o de sal√°rio
    const updatedTransactions = transactions.map(transaction => {
      const isSalary = (transaction.description.toLowerCase() === 'sal√°rio' || 
                       transaction.category === 'Sal√°rio') && 
                      transaction.amount > 0;
      
      if (isSalary) {
        // Cria a data correta baseada no salaryDay configurado
        const correctDate = this.utilsService.createSalaryDate(settings.salaryDay);
        
        console.log(`üîß Corrigindo transa√ß√£o:`, {
          id: transaction.id,
          dataAtual: transaction.date,
          dataCorreta: correctDate,
          precisaCorrigir: transaction.date !== correctDate
        });
        
        if (transaction.date !== correctDate) {
          hasChanges = true;
          return {
            ...transaction,
            date: correctDate
          };
        }
      }
      
      return transaction;
    });
    
    if (hasChanges) {
      this.storageService.saveTransactions(updatedTransactions);
      console.log('‚úÖ Data da transa√ß√£o de sal√°rio corrigida!');
      return true;
    }
    
    console.log('‚úÖ Transa√ß√£o de sal√°rio j√° est√° com data correta');
    return false;
  }

  /**
   * Remove todos os sal√°rios do m√™s atual
   */
  private removeCurrentMonthSalaries(): void {
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    
    const transactions = this.storageService.getTransactions();
    const salaryTransactions = transactions.filter(transaction => {
      const transactionDate = new Date(transaction.date);
      return (
        (transaction.description.toLowerCase() === 'sal√°rio' || 
         transaction.category === 'Sal√°rio') &&
        transaction.amount > 0 &&
        transactionDate.getMonth() === currentMonth &&
        transactionDate.getFullYear() === currentYear
      );
    });

    salaryTransactions.forEach(transaction => {
      this.storageService.deleteTransaction(transaction.id);
    });

    console.log(`Removidos ${salaryTransactions.length} sal√°rios do m√™s atual`);
  }

  /**
   * Limpa todos os sal√°rios duplicados de todos os meses
   * Mant√©m apenas um sal√°rio por m√™s, sempre na data correta
   */
  cleanAllDuplicateSalaries(): void {
    const settings = this.storageService.getSettings();
    const transactions = this.storageService.getTransactions();
    
    console.log('üßπ LIMPANDO TODOS OS SAL√ÅRIOS DUPLICADOS...');
    
    // Agrupa sal√°rios por m√™s
    const salaryByMonth = new Map<string, any[]>();
    
    transactions.forEach(transaction => {
      if ((transaction.description.toLowerCase() === 'sal√°rio' || 
           transaction.category === 'Sal√°rio') && transaction.amount > 0) {
        const monthKey = transaction.date.slice(0, 7); // YYYY-MM
        
        if (!salaryByMonth.has(monthKey)) {
          salaryByMonth.set(monthKey, []);
        }
        salaryByMonth.get(monthKey)!.push(transaction);
      }
    });

    console.log(`üîç Encontrados sal√°rios em ${salaryByMonth.size} meses diferentes`);

    // Para cada m√™s, mant√©m apenas um sal√°rio
    salaryByMonth.forEach((salaries, monthKey) => {
      if (salaries.length > 1) {
        console.log(`üìÖ M√™s ${monthKey}: ${salaries.length} sal√°rios encontrados - REMOVENDO DUPLICATAS`);
        
        // Ordena por data de cria√ß√£o (mais recente primeiro)
        salaries.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
        
        // Remove todos exceto o primeiro
        for (let i = 1; i < salaries.length; i++) {
          console.log(`üóëÔ∏è Removendo: ${salaries[i].date} - R$ ${salaries[i].amount}`);
          this.storageService.deleteTransaction(salaries[i].id);
        }
        
        console.log(`‚úÖ M√™s ${monthKey}: Mantido 1 sal√°rio, removidos ${salaries.length - 1} duplicatas`);
      } else {
        console.log(`‚úÖ M√™s ${monthKey}: Apenas 1 sal√°rio (OK)`);
      }
    });
  }

  /**
   * Calcula a data correta do sal√°rio para um m√™s espec√≠fico
   * Usa exatamente o dia configurado, mesmo em feriados
   */
  private getCorrectSalaryDateForMonth(monthKey: string): string {
    const settings = this.storageService.getSettings();
    const [year, month] = monthKey.split('-').map(Number);
    
    // Usa o m√©todo padronizado para criar a data
    const result = this.utilsService.createSalaryDate(settings.salaryDay, year, month - 1);
    
    console.log(`üìÖ Corrigindo data do sal√°rio para m√™s ${monthKey}:`, {
      diaConfigurado: settings.salaryDay,
      dataFinal: result
    });
    
    return result;
  }
}
